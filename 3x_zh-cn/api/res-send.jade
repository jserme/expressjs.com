section
  h3(id='res.send') res.send([body|status], [body])
  
  p.
    发送一个响应。

  +js.
    res.send(new Buffer('whoop'));
    res.send({ some: 'json' });
    res.send('<p>some html</p>');
    res.send(404, 'Sorry, we cannot find that!');
    res.send(500, { error: 'something blew up' });
    res.send(200);

  p.
    这个方法在输出non-streaming响应的时候自动完成了大量有用的任务
    比如如果在它前面没有定义Content-Length, 它会自动设置;
    比如加一些自动的 <em>HEAD</em>;
    比如对HTTP缓存的支持 .

  p.
    当参数为一个 <code>Buffer</code>时
    Content-Type 会被设置为 "application/octet-stream"
    除非它之前有像下面的代码：

  +js.
    res.set('Content-Type', 'text/html');
    res.send(new Buffer('<p>some html</p>'));

  p.
    当参数为一个<code>String</code>时 
    Content-Type 默认设置为"text/html":

  +js.
    res.send('<p>some html</p>');

  p.
    当参数为 <code>Array</code> 或者  <code>Object</code> 时
    Express 会返回一个 JSON :

  +js.
    res.send({ user: 'tobi' })
    res.send([1,2,3])

  p.
    最后一条当一个<code>Number</code> 作为参数，
    并且没有上面提到的任何一条在响应体里，
    Express会帮你设置一个响应体 
    比如200 会返回字符"OK", 404会返回"Not Found"等等.

  +js.
    res.send(200)
    res.send(204)
    res.send(500)
