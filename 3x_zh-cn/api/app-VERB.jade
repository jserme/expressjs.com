section
  h3(id='app.VERB') app.VERB(path, [callback...], callback)

  p.
    
    <code>app.VERB()</code> 方法为Express提供路由方法, <strong>VERB</strong> 是指某一个HTTP 动作,
    比如 <code>app.post()</code>。 可以提供多个callbacks,这多个callbacks都将会被平等对待
    ，它们的行为跟中间件一样，也有一个例外的情况，如果某一个callback执行了<code>next('route')</code>，它后面的callback就被忽略。这种情形会应用在当满足一个路由前缀，但是不需要处理这个路由，于是把它向后传递。

  p.
    下面的代码片段展示最简单的路由定义。Express 会把路径字符串转为正则表达式，然后在符合规则的请求到达时立即使用。
    请求参数<em>不会</em> 被考虑进来，比如 "GET /" 会匹配下面的这个路由, 而"GET /?name=tobi"同样也会匹配。

  +js.
    app.get('/', function(req, res){
      res.send('hello world');
    });

  p.
    同样也可以使用正则表达式，并且它能够在你指定特定路径的时候发挥大作用。
    比如下面的例子可以匹配"GET /commits/71dbb9c" ， 同时也能匹配 "GET /commits/71dbb9c..4c084f9".

  +js.
    app.get(/^\/commits\/(\w+)(?:\.\.(\w+))?$/, function(req, res){
      var from = req.params[0];
      var to = req.params[1] || 'HEAD';
      res.send('commit range ' + from + '..' + to);
    });

  p.
    可以传递一些回调，这对复用一些加载资源、校验的中间件很有用。

  +js.
    app.get('/user/:id', user.load, function(){
      // ... 
    })

  p.
    这些回调同样可以通过数组传递，简单的放置在数组中即可。

  +js.
    var middleware = [loadForum, loadThread];
    
    app.get('/forum/:fid/thread/:tid', middleware, function(){
      // ...
    })
    
    app.post('/forum/:fid/thread/:tid', middleware, function(){
      // ...
    })
