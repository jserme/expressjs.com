section
  h3(id='intro') 开始

  p.
    在确认已经安装了node之后(<a href="http://nodejs.org/#download">下载</a>),
    在你的机器上创建一个目录，让我们来开始你的第一个应用程序吧

  +js.
    $ mkdir hello-world

  p.
    在这个目录中你首先得定义一下你的应用程序“包”文件，它和其它的node程序包是一样的。
    你得在这个目录中创建一个package.json文件，在里面express作为一个依赖。
    你也可以使用 <code>npm info express version</code> 来获取express最新的版本号，
    最好使用最新的版本号而不是下面的3.x，这样新出的功能就不会让你感觉到奇怪了。

  +js.
    {
      "name": "hello-world",
      "description": "hello world test app",
      "version": "0.0.1",
      "private": true,
      "dependencies": {
        "express": "3.x"
      }
    }

  p.
    现在package.json文件已经准备好了，使用<code>npm(1)</code> 安装依赖，
    这里的依赖仅仅是Express。

  +js.
    $ npm install

  p.
    当npm完成后，Express 3.x 和它的依赖就安装到你的 ./node_modules 目录里了。
    你可以通过 <code>npm ls</code> 来确认一下，它会把Express 和它的依赖展示成下面的树状结构。

  +js.
    $ npm ls
    hello-world@0.0.1 /private/tmp
    └─┬ express@3.0.0beta7
      ├── commander@0.6.1
      ├─┬ connect@2.3.9
      │ ├── bytes@0.1.0
      │ ├── cookie@0.0.4
      │ ├── crc@0.2.0
      │ ├── formidable@1.0.11
      │ └── qs@0.4.2
      ├── cookie@0.0.3
      ├── debug@0.7.0
      ├── fresh@0.1.0
      ├── methods@0.0.1
      ├── mkdirp@0.3.3
      ├── range-parser@0.0.4
      ├─┬ response-send@0.0.1
      │ └── crc@0.2.0
      └─┬ send@0.0.3
        └── mime@1.2.6

  p.
    现在我们来写真正的代码了！创建一个名为app.js 或者 server.js的文件，叫什么看你个人喜好了。
    载入express 然后使用代码 <code>express()</code>创建一个新的应用程序:

  +js.
    var express = require('express');
    var app = express();

  p.
    在这个应用程序实例里，你可以通过 <code>app.VERB()</code>定义路由，下面的例子是"GET /"返回
    "Hello World" 字符串。
    <code>req</code> 和 <code>res</code> 对象是和node原生提供给你的一致的，你也可以执行
    <code>res.pipe()</code>, <code>req.on('data', callback)</code> 等任何事情在没有Express的情况下可以做的事情。

  p.
    Express 给这些对象加了一个封装好的方法，比如
    <code>res.send()</code>, 它会帮你设置Content-Length:

  +js.
    app.get('/hello.txt', function(req, res){
      res.send('Hello World');
    });
 
  p.
    现在我们通过执行 <code>app.listen()</code> 来绑定并监听连接。
    它接受的参数和node<a href="http://nodejs.org/api/net.html#net_server_listen_port_host_backlog_listeninglistener">net.Server#listen()</a>的方法一致:

  +js.
      var server = app.listen(3000, function() {
          console.log('Listening on port %d', server.address().port);
      });
